@*
* author: Sergey Zaikin zaikinsr@yandex.ru
* copyright: Copyright (c) 2019 Sergey Zaikin. All rights reserved.
* license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
*@

@using System.Globalization
<table class="table-condensed">
    <thead>
        <tr>
            @{
                var minDate = Side == SideType.Left ? MinDate : StartDate;
                var maxDate = MaxDate;
                var prevBtnVisible = (!minDate.HasValue || minDate < CalendarData.FirstDay) && (LinkedCalendars != true || Side == SideType.Left);
                var nextBtnVisible = (!maxDate.HasValue || maxDate > CalendarData.LastDay) && (LinkedCalendars != true || Side == SideType.Right || SingleDatePicker == true);
            }
            @if (ShowWeekNumbers == true || ShowISOWeekNumbers == true)
            {
                <th></th>
            }
            <th class="@(prevBtnVisible ? "prev available" : "")" @onclick="@(e => prevBtnVisible ? PreviousMonth(e) : null)"><span></span></th>
            <th colspan="5" class="month">
                @if (ShowDropdowns == true)
                {
                    var currentMonth = CalendarData[1][1].Month;
                    var currentYear = CalendarData[1][1].Year;
                    var inMinYear = currentYear == MinYear;
                    var inMaxYear = currentYear == MaxYear;
                    <select @key="CalendarData.Month" class="monthselect" @onchange="@(m => MonthSelected(m))">
                        @for (var m = 1; m < 13; m++)
                        {
                            var enabled = (!inMinYear || (m >= minDate?.Month)) && (!inMaxYear || (m <= maxDate?.Month));
                            var selected = m == currentMonth;
                            <option @key="m" selected="@selected" disabled="@(!enabled)" value="@m">
                                @Culture.DateTimeFormat.GetMonthName(m)
                            </option>
                        }
                    </select>

                    <select @key="CalendarData.Month.Year" class="yearselect" @onchange="@(y => YearSelected(y))">
                        @for (var y = MinYear; y <= MaxYear; y++)
                        {
                            <option @key="y" value="@y" selected="@(y == currentYear)">@y</option>
                        }
                    </select>
                }
                else
                {
                    @Culture.DateTimeFormat.GetMonthName(CalendarData[1][1].Month)<text>&nbsp;</text>@CalendarData[1][1].Year
                }
            </th>
            <th class="@(nextBtnVisible ? "next available" : "")" @onclick="@(e => nextBtnVisible ? NextMonth(e) : null)"><span></span></th>
        
        </tr>
        <tr>

            @if (ShowWeekNumbers == true || ShowISOWeekNumbers == true)
            {
                <th class="week">@WeekAbbreviation</th>
            }

            @foreach (var dayOfWeekName in DayNames)
            {
                <th>@dayOfWeekName</th>
            }

        </tr>
    </thead>
    <tbody>
        @if (EndDate == null && StartDate != null && MaxSpan.HasValue)
        {
            var maxLimit = StartDate.Value.Add(MaxSpan.Value);
            if (!maxDate.HasValue || maxLimit < maxDate)
            {
                maxDate = maxLimit;
            }
        }

        @for (int row = 0; row < 6; row++)
        {
            <tr>
                @if (ShowWeekNumbers == true)
                {
                    var weekRule = Culture.DateTimeFormat.CalendarWeekRule;
                    var firstDayOfWeek = CalendarData.FirstDayOfWeek;
                    <td class="week">
                        @DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(CalendarData[row][0].DateTime, weekRule, firstDayOfWeek)
                    </td>
                }
                else if (ShowISOWeekNumbers == true)
                {
                    <td class="week">
                        @GetIso8601WeekOfYear(CalendarData[row][0].DateTime)
                    </td>
                }

                @for (int col = 0; col < 7; col++)
                {

                    var classes = new List<string>();
                    var dt = CalendarData[row][col];
                    var disabled = false;

                    //highlight today's date
                    if (dt.Date == DateTime.Today)
                    { classes.Add("today"); }

                    //highlight weekends
                    if (dt.DayOfWeek == DayOfWeek.Saturday || dt.DayOfWeek == DayOfWeek.Sunday)
                    { classes.Add("weekend"); }

                    //grey out the dates in other months displayed at beginning and end of this calendar
                    if (dt.Month != CalendarData[1][1].Month)
                    {
                        classes.Add("off");
                        classes.Add("ends");
                    }
                    //don't allow selection of dates before the minimum date
                    if (MinDate.HasValue && dt < MinDate)
                    {
                        classes.Add("off");
                        classes.Add("disabled");
                        disabled = true;
                    }
                    //don't allow selection of dates after the maximum date
                    if (maxDate.HasValue && dt > maxDate)
                    {
                        classes.Add("off");
                        classes.Add("disabled");
                        disabled = true;
                    }

                    //don't allow selection of date if a custom function decides it's invalid
                    if (this.IsDayDisabled(dt))
                    {
                        classes.Add("off");
                        classes.Add("disabled");
                        disabled = true;
                    }

                    //highlight the currently selected start date
                    if (dt.ToString("yyyy-MM-dd") == StartDate?.ToString("yyyy-MM-dd"))
                    {
                        classes.Add("active");
                        classes.Add("start-date");
                    }

                    //highlight the currently selected end date
                    if (EndDate != null && dt.ToString("yyyy-MM-dd") == EndDate?.ToString("yyyy-MM-dd"))
                    {
                        classes.Add("active");
                        classes.Add("end-date");
                    }

                    //highlight dates in-between the selected dates
                    if (EndDate != null && dt > StartDate && dt < EndDate)
                    {
                        classes.Add("in-range");
                    }

                    //apply custom classes for this date
                    if (CustomDateFunction != null)
                    {
                        classes.Add(GetCustomDateClass(dt));
                    }

                    //highlight dates in-between the selected dates when hover
                    if ((dt > StartDate && dt < HoverDate) || dt.Date == HoverDate?.Date)
                    {
                        classes.Add("in-range");
                    }

                    if (!disabled)
                    {
                        classes.Add("available");
                    }

                    var classNames = string.Join(" ", classes);
                    <td class="@classNames" @onmouseover="@(_ => OnMouseOverDate(dt))" @onclick="@(_ => ClickDate(disabled, dt))">@dt.Day</td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public CalendarType CalendarData { get; set; }

    [Parameter] public bool? ShowWeekNumbers { get; set; } = false;
    [Parameter] public bool? ShowISOWeekNumbers { get; set; } = false;
    [Parameter] public DateTimeOffset? MinDate { get; set; }
    [Parameter] public DateTimeOffset? MaxDate { get; set; }
    [Parameter] public bool? LinkedCalendars { get; set; } = true;
    [Parameter] public SideType? Side { get; set; }
    [Parameter] public bool? ShowDropdowns { get; set; } = true;
    [Parameter] public bool? SingleDatePicker { get; set; } = false;
    [Parameter] public string WeekAbbreviation { get; set; } = string.Empty;
    [Parameter] public DateTimeOffset? HoverDate { get; set; }
    [Parameter] public CultureInfo Culture { get; set; }
    [Parameter] public Func<DateTimeOffset, bool> DaysEnabledFunction { get; set; }
    [Parameter] public Func<DateTimeOffset, object> CustomDateFunction { get; set; }
    [Parameter] public string CustomDateClass { get; set; }

    [Parameter] public DateTimeOffset? StartDate { get; set; }
    [Parameter] public DateTimeOffset? EndDate { get; set; }

    [Parameter] public EventCallback<DateTimeOffset> OnMonthChanged { get; set; }
    [Parameter] public EventCallback<DateTimeOffset> OnClickDate { get; set; }
    [Parameter] public EventCallback<DateTimeOffset> OnHoverDate { get; set; }

    [Parameter] public TimeSpan? MaxSpan { get; set; }

    private int MinYear => MinDate?.Year ?? 1900;
    private int MaxYear => MaxDate?.Year ?? DateTime.Now.AddYears(100).Year;

    private List<string> DayNames { get; set; } = new List<string>();

    private List<string> GetDayNames()
    {
        var dayNames = Culture.DateTimeFormat.ShortestDayNames.ToList();
        var firstDayNumber = (int)CalendarData.FirstDayOfWeek;
        if (firstDayNumber > 0)
        {
            for (int i = 0; i < firstDayNumber; i++)
            {
                var item = dayNames[0];
                dayNames.Insert(dayNames.Count, item);
                dayNames.RemoveAt(0);
            }
        }
        return dayNames;
    }

    protected override void OnInitialized()
    {
        DayNames = GetDayNames();
        base.OnInitialized();
    }

    public bool IsDayDisabled(DateTimeOffset date)
    {
        if (DaysEnabledFunction != null)
        {
            return !DaysEnabledFunction(date);
        }
        else
        {
            return false;
        }
    }

    public string GetCustomDateClass(DateTimeOffset date)
    {
        if (CustomDateFunction == null) return string.Empty;

        var customFunctionResult = CustomDateFunction(date);
        return customFunctionResult switch
        {
            string className => className ?? string.Empty,
            bool addName => addName ? CustomDateClass ?? string.Empty : string.Empty,
            _ => string.Empty
        };
    }

    private Task PreviousMonth(MouseEventArgs e)
    {
        return OnMonthChanged.InvokeAsync(CalendarData.Month.AddMonths(-1));
    }

    private Task NextMonth(MouseEventArgs e)
    {
        return OnMonthChanged.InvokeAsync(CalendarData.Month.AddMonths(1));
    }

    private Task MonthSelected(ChangeEventArgs e)
    {
        var month = int.Parse(e.Value.ToString());
        var d = CalendarData.Month;
        return OnMonthChanged.InvokeAsync(new DateTime(d.Year, month, d.Day, d.Hour, d.Minute, d.Second));
    }

    private Task YearSelected(ChangeEventArgs e)
    {
        var year = int.Parse(e.Value.ToString());
        var d = CalendarData.Month;
        return OnMonthChanged.InvokeAsync(new DateTime(year, d.Month, d.Day, d.Hour, d.Minute, d.Second));
    }

    private Task ClickDate(bool disabled, DateTimeOffset date)
    {
        if (disabled)
        {
            return Task.CompletedTask;
        }
        return OnClickDate.InvokeAsync(date);
    }

    private Task OnMouseOverDate(DateTimeOffset date)
    {
        if (HoverDate != date)
        {
            return OnHoverDate.InvokeAsync(date);
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    private int GetIso8601WeekOfYear(DateTime time)
    {
        DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
        if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday)
        {
            time = time.AddDays(3);
        }

        return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
    }
}